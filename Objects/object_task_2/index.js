// Представьте, что вы разрабатываете программу выдачи талончиков для местной больницы. До этого талончики выписывались вручную и вам необходимо оптимизировать данную задачу.

// Вам требуется создать функцию giveTalonsInOrder(), которая сортирует очередь из пациентов. Она принимает в себя 2 параметра:

// patients - массив объектов. Каждый объект хранит информацию об имени пациента и его уникальном номере - id.
// orders - массив уникальных номеров id, который указывает порядок, в котором должны стоять в очереди пациенты.
// Функция должна возвращать новый массив, в котором объекты из массива patients будут отсортированы по id из массива orders.

// Посмотрите на возможный результат функции giveTalonsInOrder():
function giveTalonsInOrder(patients, ordersArr) {
  // Создаем копию исходного массива пациентов
  const sortedPatients = [...patients];

  // Сортируем массив пациентов в соответствии с порядком из orders
  sortedPatients.sort((a, b) => {
    // Определяет индекс пациента a.id в массиве orders. Индекс указывает позицию пациента в очереди.
    const orderA = ordersArr.indexOf(a.id);
    //Определяет индекс пациента b.id в массиве orders. Индекс указывает позицию пациента в очереди.
    const orderB = ordersArr.indexOf(b.id);
    return orderA - orderB;
  });

  return sortedPatients;
}

// Пример использования функции
const ordersArr = [4, 2, 1, 3];
const patients = [
  { id: 1, name: "Максим" },
  { id: 2, name: "Николай" },
  { id: 3, name: "Ангелина" },
  { id: 4, name: "Виталий" },
];

const result = giveTalonsInOrder(patients, ordersArr);
console.log("result", result);
/* Возвращает массив
  [
    { id: 4, name: 'Виталий' },
    { id: 2, name: 'Николай' },
    { id: 1, name: 'Максим' },
    { id: 3, name: 'Ангелина' }
  ]
  */
